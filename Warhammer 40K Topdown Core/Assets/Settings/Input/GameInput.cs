//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""e3287498-5805-45f1-b83b-4b8f065301e9"",
            ""actions"": [
                {
                    ""name"": ""CurserControl"",
                    ""type"": ""Value"",
                    ""id"": ""a4a59144-4696-4f9d-9658-14dafd1f517d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""85935ffb-c7e3-402b-9ae2-dd10ac925d44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rightclick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a82b4a77-dcbc-4c5f-88aa-a47bb88e43ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4b7d32d5-adc7-4efe-bbdf-897bfc43cb76"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CurserControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54223340-2e7e-45e0-89d1-1032631bf4bb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3dc5dfb-d6d1-4e61-85eb-f238bf44c2f6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rightclick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay"",
            ""id"": ""cf8f6a04-c54d-4a38-8723-afe249f59438"",
            ""actions"": [
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""470bc24d-c0dc-40f4-b041-81979f8c467b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Execute"",
                    ""type"": ""Button"",
                    ""id"": ""7b28c306-3010-4033-b6d5-4e647e1b0cea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""474dab00-319c-48a9-be18-be5403c95625"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fe64f40-16ef-42f6-ac43-80ddedaa2afe"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Execute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_CurserControl = m_UI.FindAction("CurserControl", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_Rightclick = m_UI.FindAction("Rightclick", throwIfNotFound: true);
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Activate = m_Gameplay.FindAction("Activate", throwIfNotFound: true);
        m_Gameplay_Execute = m_Gameplay.FindAction("Execute", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_CurserControl;
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_Rightclick;
    public struct UIActions
    {
        private @GameInput m_Wrapper;
        public UIActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CurserControl => m_Wrapper.m_UI_CurserControl;
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @Rightclick => m_Wrapper.m_UI_Rightclick;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @CurserControl.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCurserControl;
                @CurserControl.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCurserControl;
                @CurserControl.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCurserControl;
                @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Rightclick.started -= m_Wrapper.m_UIActionsCallbackInterface.OnRightclick;
                @Rightclick.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnRightclick;
                @Rightclick.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnRightclick;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CurserControl.started += instance.OnCurserControl;
                @CurserControl.performed += instance.OnCurserControl;
                @CurserControl.canceled += instance.OnCurserControl;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Rightclick.started += instance.OnRightclick;
                @Rightclick.performed += instance.OnRightclick;
                @Rightclick.canceled += instance.OnRightclick;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Activate;
    private readonly InputAction m_Gameplay_Execute;
    public struct GameplayActions
    {
        private @GameInput m_Wrapper;
        public GameplayActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Activate => m_Wrapper.m_Gameplay_Activate;
        public InputAction @Execute => m_Wrapper.m_Gameplay_Execute;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Activate.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnActivate;
                @Activate.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnActivate;
                @Activate.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnActivate;
                @Execute.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnExecute;
                @Execute.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnExecute;
                @Execute.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnExecute;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Activate.started += instance.OnActivate;
                @Activate.performed += instance.OnActivate;
                @Activate.canceled += instance.OnActivate;
                @Execute.started += instance.OnExecute;
                @Execute.performed += instance.OnExecute;
                @Execute.canceled += instance.OnExecute;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IUIActions
    {
        void OnCurserControl(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnRightclick(InputAction.CallbackContext context);
    }
    public interface IGameplayActions
    {
        void OnActivate(InputAction.CallbackContext context);
        void OnExecute(InputAction.CallbackContext context);
    }
}
